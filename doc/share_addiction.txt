///Используется в двух местах:
///1) В data.py в методе check(...), который проверяет шару на валидность.
///2) В work.py 
Share.generate_transaction(...):
    где агрументы для work.py:
        @tracker=self.node.tracker,
        @share_data=dict(
            previous_share_hash=self.node.best_share_var.value,
            coinbase=(script.create_push_script([
                self.current_work.value['height'],
                 ] + ([mm_data] if mm_data else []) + [
            ]) + self.current_work.value['coinbaseflags'])[:100],
            nonce=random.randrange(2**32),
            pubkey_hash=pubkey_hash,
            subsidy=self.current_work.value['subsidy'],
            donation=math.perfect_round(65535*self.donation_percentage/100),
            stale_info=(lambda (orphans, doas), total, (orphans_recorded_in_chain, doas_recorded_in_chain):
                'orphan' if orphans > orphans_recorded_in_chain else
                'doa' if doas > doas_recorded_in_chain else
                None
            )(*self.get_stale_counts()),
            desired_version=(share_type.SUCCESSOR if share_type.SUCCESSOR is not None else share_type).VOTING_VERSION,
        ),
        @block_target=self.current_work.value['bits'].target,
        @desired_timestamp=int(time.time() + 0.5),
        @desired_target=desired_share_target,
        @ref_merkle_link=dict(branch=[], index=0),
        @desired_other_transaction_hashes_and_fees=zip(tx_hashes, self.current_work.value['transaction_fees']),
        @net=self.node.net,
        @known_txs=tx_map,
        @base_subsidy=self.node.net.PARENT.SUBSIDY_FUNC(self.current_work.value['height'])


    @t0

    Берётся @previous_share из трекера -> tracker.items[share_data['previous_share_hash']]

    Берётся высота и хэш последней шары -> @height, @last = tracker.get_height_and_last(share_data['previous_share_hash'])
    Assert проверка высоты на то, что она больше или равна net.REAL_CHAIN_LENGTH [=24*60*60 = 8640] OR last is None -> 
        -> assert height >= net.REAL_CHAIN_LENGTH or last is None
    Если height < net.TARGET_LOOKBEHIND[=200] [что возможно только тогда, когда last is None, т.е. шарчейн пустой]:
            @pre_target3 = net.MAX_TARGET [=2**256//2**20-1]
    В противном случае:
        @attempts_per_second = -> get_pool_attempts_per_second(tracker, share_data['previous_share_hash'], net.TARGET_LOOKBEHIND, min_work=True, integer=True):
            где агрументы:
                @tracker = tracker,
                @previous_share_hash = share_data['previous_share_hash'],
                @dist = net.TARGET_LOOKBEHIND,
                @min_work=True,
                @integer=True
            
            assert проверка dist на то, что он больше или равен 2.
            @near [ближняя] = tracker.items[previous_share_hash]
            @far [дальняя]  = tracker.items[tracker.get_nth_parent_hash(previous_share_hash, dist - 1)]
                //200 шар назад
            @attempts = tracker.get_delta(near.hash, far.hash).min_work [потому что min_work = True]
                -> get_delta(...):
                    //TODO:
            @time = near.timestamp - far.timestamp
            return attempts/time
            
            Результат: возвращает минимальное количество попыток в секунду.
        
        если @attempts_per_second == 0:
            @pre_target = 2**256//(net.SHARE_PERIOD[=25]*attempts_per_second) - 1
        в противном случае:
            @pre_target = 2**256-1
        @pre_target2 = math.clip(pre_target, (previous_share.max_target*9//10, previous_share.max_target*11//10))
        @pre_target3 = math.clip(pre_target2, (net.MIN_TARGET, net.MAX_TARGET))

    #pre_target переводится в bits
    max_bits = bitcoin_data.FloatingInteger.from_target_upper_bound(pre_target3)
    bits = bitcoin_data.FloatingInteger.from_target_upper_bound(math.clip(desired_target, (pre_target3//30, pre_target3)))

    @t1

    @new_transaction_size = 0 # including witnesses
    @all_transaction_stripped_size = 0 # stripped size
    @all_transaction_real_size = 0 # including witnesses, for statistics

    @past_shares = списку tracker.get_chain(share_data['previous_share_hash'], min(height, 100))
    #Перебирается список @past_shares, где у каждой share в цикле перебирается @tx_hash in share.new_transaction_hashes, добавляя каждый @tx_hash в tx_hash_to_this

    @t2
    
    ///фокусы со segwit, для подсчёта количества транзакаций и размера блока.
    #Перебор @tx_hash, @fee in desired_other_transaction_hashes_and_fees:
        Если @known_txs не None, то расчитывается размер транзакций:
            @this_stripped_size = bitcoin_data.tx_id_type.packed_size(known_txs[tx_hash])
            @this_real_size     = bitcoin_data.tx_type.packed_size(known_txs[tx_hash])
            @this_weight        = this_real_size + 3*this_stripped_size //each byte in a transaction counts as 4 bytes of block weight
        В противном случае:
            //мы просто проверяем чужую долю. Рассчитаем размеры в should_punish_reason()
            @this_stripped_size = 0
            @this_real_size     = 0
            @this_weight        = 0

        //Проверки, чтобы не переполнить блок:
        if @all_transaction_stripped_size + @this_stripped_size + 80 + @cls.gentx_size [= 50000] +  500 > @net.BLOCK_MAX_SIZE[= 1000000]:
            break
        if @all_transaction_weight + @this_weight + 4*80 + @cls.gentx_weight[= 200000] + 2000 > @net.BLOCK_MAX_WEIGHT[= 4000000]:
            break

        //TODO:

    @t3

    #Проверка максимального числа в @transaction_hash_refs:
        Если max(@transaction_hash_refs) < 2**16, то @transaction_hash_refs упаковывается в array.array('H', transaction_hash_refs)
        Если max(@transaction_hash_refs) < 2**32, то @transaction_hash_refs упаковывается в array.array('L', transaction_hash_refs)
        , где 'H' = unsigned short в C; 'L' = unsigned long в C.

    @t4

    #Если @all_transaction_stripped_size != 0, то выводится в логи информация о генерации шары, с подробной статистикой размеров транзакций и прочего.
    
    @included_transactions = set(@other_transaction_hashes)
    //Выплаты, которые не входят в @included_transactions:
    @removed_fees = [fee for tx_hash, fee in @desired_other_transaction_hashes_and_fees if tx_hash not in @included_transactions]

    @definite_fees = #сумме всех @fee -> tx_hash [если @fee is None, то прибавляется 0], fee in desired_other_transaction_hashes_and_fees, если tx_hash in included_transactions

    Если None not in removed_fees:
        @share_data = dict(
                        share_data,
                        subsidy = share_data['subsidy'] - sum(removed_fees))
    В противном случае:
        assert проверка base_subsidy is not None
        share_data = dict(
                        share_data,
                        subsidy = base_subsidy + definite_fees)
    
    @weights, @total_weight, @donation_weight = tracker.get_cumulative_weights(
            previous_share.share_data['previous_share_hash'] if previous_share is not None else None,
            max(0, min(height, net.REAL_CHAIN_LENGTH) - 1),
            65535*net.SPREAD[=30]*bitcoin_data.target_to_average_attempts(block_target),
    )
        -> get_cumulative_weights = WeightsSkipList(self) [self = OkayTracker]
            Где WeightsSkipList:
                //TODO
    
    assert проверка total_weight == sum(weights.itervalues()) + donation_weight, (total_weight, sum(weights.itervalues()) + donation_weight)

    //99.5% weight на всех.
    @amounts = #циклом проходится weights.iteritems(), где каждый элемент разбивается на script, weight, после чего в dict @amounts добавляется элемент:
        (script, share_data['subsidy']*199*weight//(200*total_weight))
    @this_script = bitcoin_data.pubkey_hash_to_script2(share_data['pubkey_hash'])
    //0.5% нашедшему блок:
    @amounts[@this_script] = amounts.get(this_script, 0) + share_data['subsidy']//200 
    //Остаток, который является донатами и остатком после округления, отправляется на DONATION_SCRIPT:
    @amounts[DONATION_SCRIPT] = amounts.get(DONATION_SCRIPT, 0) + share_data['subsidy'] - sum(amounts.itervalues())

    #Проверка:
        if sum(amounts.itervalues()) != share_data['subsidy'] or any(x < 0 for x in amounts.itervalues()):
            raise ValueError()

    //Сортировка amounts и ограничение по длине блока, которая вряд ли будет, когда-либо достигнута.
    @dests = sorted(amounts.iterkeys(), key=lambda script: (script == DONATION_SCRIPT, amounts[script], script))[-4000:]

    //Узнаём, активен ли segwit для текущей версии шары.
    @segwit_activated = is_segwit_activated(cls.VERSION, net)

    Если @segwit_data is None и @known_txs is None
        @segwit_activated = False
    
    Проверка:
        if not(segwit_activated or known_txs is None) and any(bitcoin_data.is_segwit_tx(known_txs[h]) for h in other_transaction_hashes):
            raise ValueError('segwit transaction included before activation')

    //Формируются segwit данные:
    if segwit_activated and known_txs is not None:
        share_txs = [(known_txs[h], bitcoin_data.get_txid(known_txs[h]), h) for h in other_transaction_hashes]
        segwit_data = dict(txid_merkle_link=bitcoin_data.calculate_merkle_link([None] + [tx[1] for tx in share_txs], 0), wtxid_merkle_root=bitcoin_data.merkle_hash([0] + [bitcoin_data.get_wtxid(tx[0], tx[1], tx[2]) for tx in share_txs]))
    if segwit_activated and segwit_data is not None:
        witness_reserved_value_str = '[P2Pool]'*4
        witness_reserved_value = pack.IntType(256).unpack(witness_reserved_value_str)
        witness_commitment_hash = bitcoin_data.get_witness_commitment_hash(segwit_data['wtxid_merkle_root'], witness_reserved_value)

    //Генерируется share_info:
    [for return] @share_info = dict(
        share_data= @share_data,

        //far_share_hash - шара на 100 шар раньше.
        far_share_hash=None if @last is None and @height < 99 else tracker.get_nth_parent_hash(@share_data['previous_share_hash'], 99),
        
        max_bits=max_bits,
        bits=bits,
        timestamp=(math.clip(desired_timestamp, (
                    (previous_share.timestamp + net.SHARE_PERIOD) - (net.SHARE_PERIOD - 1), # = previous_share.timestamp + 1
                    (previous_share.timestamp + net.SHARE_PERIOD) + (net.SHARE_PERIOD - 1),)) if previous_share is not None else desired_timestamp
                  ) if cls.VERSION < 32 else
                  max(desired_timestamp, (previous_share.timestamp + 1)) if previous_share is not None else desired_timestamp,
        new_transaction_hashes=new_transaction_hashes,
        transaction_hash_refs=transaction_hash_refs,
        absheight=((previous_share.absheight if previous_share is not None else 0) + 1) % 2**32,
        abswork=((previous_share.abswork if previous_share is not None else 0) + bitcoin_data.target_to_average_attempts(bits.target)) % 2**128,
    )

    # проверка на то, что новая шара старше на 180+ секунд, то выводится предупреждение.
    # проверка на то, что предыдущая шара старше на 3 секунды, чем время сейчас.

    Если @segwit_activated == True:
        @share_info['segwit_data'] = @segwit_data

    //Формируется gentx:
    [for return] @gentx = dict(
        version=1,
        tx_ins=[dict(
            previous_output=None,
            sequence=None,
            script=@share_data['coinbase'],
        )],
        tx_outs=([dict(value=0, script='\x6a\x24\xaa\x21\xa9\xed' + pack.IntType(256).pack(witness_commitment_hash))] if segwit_activated else []) +
            [dict(value=amounts[script], script=script) for script in dests if amounts[script] or script == DONATION_SCRIPT] +
            [dict(value=0, script='\x6a\x28' + cls.get_ref_hash(net, share_info, ref_merkle_link) + pack.IntType(64).pack(last_txout_nonce))],
        lock_time=0,
    )

    Если segwit_activated == True:
        @gentx['marker'] = 0
        @gentx['flag'] = 1
        @gentx['witness'] = [[witness_reserved_value_str]]

    [for return]#Создаётся функция [на самом деле, это многострочная лямбда], которая создаёт объект класса BaseShare и возвращает его:
        ->
        def get_share(header, last_txout_nonce=last_txout_nonce):
            min_header = dict(header); del min_header['merkle_root']
            share = cls(net, None, dict(
                min_header=min_header,
                share_info=share_info,
                ref_merkle_link=dict(branch=[], index=0),
                last_txout_nonce=last_txout_nonce,
                hash_link=prefix_to_hash_link(bitcoin_data.tx_id_type.pack(gentx)[:-32-8-4], cls.gentx_before_refhash),
                merkle_link=bitcoin_data.calculate_merkle_link([None] + other_transaction_hashes, 0),
            ))
            assert share.header == header # checks merkle_root
            return share
        
    @t5

    Если p2pool.BENCH:
        выводит затраченное время на всю функцию generate_transaction()
        где вычисления построены на t0-t5.

    return share_info, gentx, other_transaction_hashes, get_share